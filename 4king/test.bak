#lang racket

(require racket/struct)
(require racket/match)
(require "4king-data.rkt")



;(list-index 3 '(1 2 3 4) 0)


;LIST内の特定の要素の場所を返す
(define (list-index2 num lst count)
  (cond ((null? lst) #f)
         ((= num (car lst)) count)
         (else (list-index num (cdr lst) (+ 1 count)))))


;(battle-zero 2 '(1 1 2) '(1 1 2) 1 '() 1)

(define (battle-zero player enemy car-command-list enemy-attack-list p-count e-count damage-list);counterは一つ上のLoopで1から増やす
  (cond ((null? enemy-attack-list) (reverse damage-list))
        ((and (= e-count car-command-list) (= p-count (car enemy-attack-list)));タイマン通常戦闘
          (battle-zero car-command-list (cdr enemy-attack-list) p-count (+ 1 e-count)
           (cons "taiman" damage-list)))
         ((= p-count (car enemy-attack-list));敵だけがこちらを攻撃
        　(battle-zero car-command-list (cdr enemy-attack-list) p-count (+ 1 e-count)
           (cons "bousen" damage-list)))
         ((and (not (= p-count (car enemy-attack-list))) (= e-count car-command-list));こちらだけ攻撃
          (battle-zero car-command-list (cdr enemy-attack-list) p-count (+ 1 e-count)
           (cons "ippouteki" damage-list)))
         (else  (battle-zero car-command-list (cdr enemy-attack-list)  p-count (+ 1 e-count);どちらも狙ってない
           (cons "nanimonai" damage-list)))))


(define (taiman player enemy)
  (match-let (((PLAYER NAME SKILLP HITP LUCKP EQUIP GOLD ITEMS SPECIAL WIN) (car player)))
    (match-let (((ENEMY E-NAME E-SKILLP E-HITP) (list-ref enemy (- e-count 1))))
      (let ((


(battle-zero 1 '(3 2 1) 1 1 '())



(define (battle-map command-list enemy-attack-list p-count damage-lists)
  (if (null? command-list) (reverse damage-lists)
      (battle-map (cdr command-list) enemy-attack-list (+ 1 p-count)
                  (cons (battle-zero (car command-list) enemy-attack-list p-count 1 '()) damage-lists))))

(battle-map '(1 2 3 4) '(2 2 3 4) 1 '())


(define test-i '(1 2 3))
(define test-j '(2 2 2))

(for/list ((k (iota (length test-i) 1 1)))
(for/list ((i test-i)
           (j test-j))
     ;      (k (iota (length test-i) 1 1)))
  (cond ((and (= i k) (= j i)) (list i j k "taiman"))
        ((and (not (= i k)) (= j k))  (list i j k "bousen"))
        ((and (= i k) (not (= j k))) (list i j k "ippouteki"))
        (else (list i j k "sonota")))))
